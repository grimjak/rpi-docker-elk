# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = false
  ## Run telegraf in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  ## The HTTP or UDP URL for your InfluxDB instance.  Each item should be
  ## of the form:
  ##   scheme "://" host [ ":" port]
  ##
  ## Multiple urls can be specified as part of the same cluster,
  ## this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://influxdb:8086"] # required
  ## The target database for metrics (telegraf will create it if not exists).
  database = "telegraf" # required

  ## Name of existing retention policy to write to.  Empty string writes to
  ## the default retention policy.
  retention_policy = ""
  ## Write consistency (clusters only), can be: "any", "one", "quorum", "all"
  write_consistency = "any"

  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  timeout = "5s"
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"
  ## Set the user agent for HTTP POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"
  ## Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
  # udp_payload = 512

  ## Optional SSL Config
  # ssl_ca = "/etc/telegraf/ca.pem"
  # ssl_cert = "/etc/telegraf/cert.pem"
  # ssl_key = "/etc/telegraf/key.pem"
  ## Use SSL but skip chain & host verification
  # insecure_skip_verify = false



###############################################################################
#                            PROCESSOR PLUGINS                                #
###############################################################################

# # Print all metrics that pass through this filter.
# [[processors.printer]]



###############################################################################
#                            AGGREGATOR PLUGINS                               #
###############################################################################

# # Keep the aggregate min/max of each metric passing through.
# [[aggregators.minmax]]
#   ## General Aggregator Arguments:
#   ## The period on which to flush & clear the aggregator.
#   period = "30s"
#   ## If true, the original metric will be dropped by the
#   ## aggregator and will not get sent to the output plugins.
#   drop_original = false



###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false


# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default, telegraf gather stats for all mountpoints.
  ## Setting mountpoints will restrict the stats to the specified mountpoints.
  # mount_points = ["/"]

  ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
  ## present on /run, /var/run, /dev/shm or /dev).
  ignore_fs = ["tmpfs", "devtmpfs", "devfs"]


# Read metrics about disk IO by device
[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb"]
  ## Uncomment the following line if you need disk serial numbers.
  # skip_serial_number = false
  #
  ## On systems which support it, device metadata can be added in the form of
  ## tags.
  ## Currently only Linux is supported via udev properties. You can view
  ## available properties for a device by running:
  ## 'udevadm info -q property -n /dev/sda'
  # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
  #
  ## Using the same metadata source as device_tags, you can also customize the
  ## name of the device via templates.
  ## The 'name_templates' parameter is a list of templates to try and apply to
  ## the device. The template may contain variables in the form of '$PROPERTY' or
  ## '${PROPERTY}'. The first template which does not contain any variables not
  ## present for the device is used as the device name tag.
  ## The typical use case is for LVM volumes, to get the VG/LV name instead of
  ## the near-meaningless DM-0 name.
  # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]


# Read metrics about memory usage
[[inputs.mem]]
  # no configuration


# Read metrics about network interface usage
[[inputs.net]]
  ## By default, telegraf gathers stats from any up interface (excluding loopback)
  ## Setting interfaces will tell it to gather these explicit interfaces,
  ## regardless of status.
  ##
  # interfaces = ["eth0"]


# Read TCP metrics such as established, time wait and sockets counts.
[[inputs.netstat]]
  # no configuration


# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration


# Retrieves SNMP values from remote agents
[[inputs.snmp]]
  agents = [ "192.168.1.168:161" ]
  interval = "60s"
  ## Timeout for each SNMP query.
  timeout = "5s"
  ## Number of retries to attempt within timeout.
  retries = 3
  ## SNMP version, values can be 1, 2, or 3
  version = 2

  ## SNMP community string.
  community = "public"
  name = "snmp"
  ## The GETBULK max-repetitions parameter
  max_repetitions = 10

  ## measurement name
  [[inputs.snmp.field]]
    name = "hostname"
    oid = "RFC1213-MIB::sysName.0"
    is_tag = true

  [[inputs.snmp.field]]
    oid = "HOST-RESOURCES-MIB::hrMemorySize"

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.8741.1.3.1.3.0"
    name = "cpu_percent"
    #inherit_tags = [ "hostname" ]

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.8741.1.3.1.4.0"
    name = "memort_percent"
    #inherit_tags = [ "hostname" ]

  [[inputs.snmp.field]]
    oid = "1.3.6.1.4.1.8741.1.3.1.2.0"
    name = "current_connections"

  [[inputs.snmp.table]]
    ## measurement name
    name = "snmp"
    inherit_tags = [ "hostname" ]
    oid = "IF-MIB::ifXTable"

    [[inputs.snmp.table.field]]
      name = "ifName"
      oid = "IF-MIB::ifName"
      is_tag = true


#unifi access point
[[inputs.snmp]]
  # List of agents to poll
  agents = [ "192.168.1.223" ]
  # Polling interval
  interval = "60s"
  # Timeout for each SNMP query.
  timeout = "10s"
  # Number of retries to attempt within timeout.
  retries = 3
  # SNMP version, UAP only supports v1
  version = 1
  # SNMP community string.
  community = "grimjak"
  # The GETBULK max-repetitions parameter
  max_repetitions = 10
  # Measurement name
  name = "snmp.UAP"
  ##
  ## System Details
  ##
  #  System name (hostname)
  [[inputs.snmp.field]]
    is_tag = true
    name = "sysName"
    oid = "RFC1213-MIB::sysName.0"
  #  System vendor OID
  [[inputs.snmp.field]]
    name = "sysObjectID"
    oid = "RFC1213-MIB::sysObjectID.0"
  #  System description
  [[inputs.snmp.field]]
    name = "sysDescr"
    oid = "RFC1213-MIB::sysDescr.0"
  #  System contact
  [[inputs.snmp.field]]
    name = "sysContact"
    oid = "RFC1213-MIB::sysContact.0"
  #  System location
  [[inputs.snmp.field]]
    name = "sysLocation"
    oid = "RFC1213-MIB::sysLocation.0"
  #  System uptime
  [[inputs.snmp.field]]
    name = "sysUpTime"
    oid = "RFC1213-MIB::sysUpTime.0"
  #  UAP model
  [[inputs.snmp.field]]
    name = "unifiApSystemModel"
    oid = "UBNT-UniFi-MIB::unifiApSystemModel"
  #  UAP firmware version
  [[inputs.snmp.field]]
    name = "unifiApSystemVersion"
    oid = "UBNT-UniFi-MIB::unifiApSystemVersion"
  ##
  ## Host Resources
  ##
  #  Total memory
  [[inputs.snmp.field]]
    name = "memTotal"
    oid = "FROGFOOT-RESOURCES-MIB::memTotal.0"
  #  Free memory
  [[inputs.snmp.field]]
    name = "memFree"
    oid = "FROGFOOT-RESOURCES-MIB::memFree.0"
  #  Buffer memory
  [[inputs.snmp.field]]
    name = "memBuffer"
    oid = "FROGFOOT-RESOURCES-MIB::memBuffer.0"
  #  Cache memory
  [[inputs.snmp.field]]
    name = "memCache"
    oid = "FROGFOOT-RESOURCES-MIB::memCache.0"
  #  Per-interface traffic, errors, drops
  [[inputs.snmp.table]]
    oid = "IF-MIB::ifTable"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "IF-MIB::ifDescr"
  ##
  ## Interface Details & Metrics
  ##
  #  Wireless interfaces
  [[inputs.snmp.table]]
    oid = "UBNT-UniFi-MIB::unifiRadioTable"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "UBNT-UniFi-MIB::unifiRadioName"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "UBNT-UniFi-MIB::unifiRadioRadio"
  #  BSS instances
  [[inputs.snmp.table]]
    oid = "UBNT-UniFi-MIB::unifiVapTable"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "UBNT-UniFi-MIB::unifiVapName"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "UBNT-UniFi-MIB::unifiVapRadio"
  #  Ethernet interfaces
  [[inputs.snmp.table]]
    oid = "UBNT-UniFi-MIB::unifiIfTable"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "UBNT-UniFi-MIB::unifiIfName"
  ##
  ## System Performance
  ##
  #  System load averages
  [[inputs.snmp.table]]
    oid = "FROGFOOT-RESOURCES-MIB::loadTable"
    [[inputs.snmp.table.field]]
      is_tag = true
      oid = "FROGFOOT-RESOURCES-MIB::loadDescr"
  ##
  ## SNMP metrics
  ##
  #  Number of SNMP messages received
  [[inputs.snmp.field]]
    name = "snmpInPkts"
    oid = "SNMPv2-MIB::snmpInPkts.0"
  #  Number of SNMP Get-Request received
  [[inputs.snmp.field]]
    name = "snmpInGetRequests"
    oid = "SNMPv2-MIB::snmpInGetRequests.0"
  #  Number of SNMP Get-Next received
  [[inputs.snmp.field]]
    name = "snmpInGetNexts"
    oid = "SNMPv2-MIB::snmpInGetNexts.0"
  #  Number of SNMP objects requested
  [[inputs.snmp.field]]
    name = "snmpInTotalReqVars"
    oid = "SNMPv2-MIB::snmpInTotalReqVars.0"
  #  Number of SNMP Get-Response received
  [[inputs.snmp.field]]
    name = "snmpInGetResponses"
    oid = "SNMPv2-MIB::snmpInGetResponses.0"
  #  Number of SNMP messages sent
  [[inputs.snmp.field]]
    name = "snmpOutPkts"
    oid = "SNMPv2-MIB::snmpOutPkts.0"
  #  Number of SNMP Get-Request sent
  [[inputs.snmp.field]]
    name = "snmpOutGetRequests"
    oid = "SNMPv2-MIB::snmpOutGetRequests.0"
  #  Number of SNMP Get-Next sent
  [[inputs.snmp.field]]
    name = "snmpOutGetNexts"
    oid = "SNMPv2-MIB::snmpOutGetNexts.0"
  #  Number of SNMP Get-Response sent
  [[inputs.snmp.field]]
    name = "snmpOutGetResponses"
    oid = "SNMPv2-MIB::snmpOutGetResponses.0"

[[inputs.snmp]]
  agents = [ "192.168.1.1" ]
  version = 2
  community = "grimjak"
  interval = "60s"
  timeout = "10s"
  retries = 3

  [[inputs.snmp.field]]
    name = "hostname"
    oid = "RFC1213-MIB::sysName.0"
    is_tag = true

  [[inputs.snmp.field]]
    name = "uptime"
    oid = "DISMAN-EXPRESSION-MIB::sysUpTimeInstance"

  # IF-MIB::ifTable contains counters on input and output traffic as well as errors and discards.
  [[inputs.snmp.table]]
    name = "interface"
    inherit_tags = [ "hostname" ]
    oid = "IF-MIB::ifTable"

    # Interface tag - used to identify interface in metrics database
    [[inputs.snmp.table.field]]
      name = "ifDescr"
      oid = "IF-MIB::ifDescr"
      is_tag = true

  # IF-MIB::ifXTable contains newer High Capacity (HC) counters that do not overflow as fast for a few of the ifTable counters
  [[inputs.snmp.table]]
    name = "interface"
    inherit_tags = [ "hostname" ]
    oid = "IF-MIB::ifXTable"

    # Interface tag - used to identify interface in metrics database
    [[inputs.snmp.table.field]]
      name = "ifDescr"
      oid = "IF-MIB::ifDescr"
      is_tag = true

  # EtherLike-MIB::dot3StatsTable contains detailed ethernet-level information about what kind of errors have been logged on an interface (such as FCS error, frame too long, etc)
  [[inputs.snmp.table]]
    name = "interface"
    inherit_tags = [ "hostname" ]
    oid = "EtherLike-MIB::dot3StatsTable"

    # Interface tag - used to identify interface in metrics database
    [[inputs.snmp.table.field]]
      name = "ifDescr"
      oid = "IF-MIB::ifDescr"
      is_tag = true

# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration

# NOTE: this plugin forks the ping command. You may need to set capabilities
# via setcap cap_net_raw+p /bin/ping
[[inputs.ping]]
## List of urls to ping
urls = ["8.8.8.8","192.168.1.168","192.168.1.203"] # required
## number of pings to send per collection (ping -c <COUNT>)
# count = 1
## interval, in s, at which to ping. 0 == default (ping -i <PING_INTERVAL>)
## Not available in Windows.
# ping_interval = 1.0
## per-ping timeout, in s. 0 == no timeout (ping -W <TIMEOUT>)
# timeout = 1.0
## interface to send ping from (ping -I <INTERFACE>)
# interface = ""

# Exec a speedtest every 5 minutes Required: speedtest-cli (pip install speedtest-cli) - 
# https://github.com/sivel/speedtest-cli
[[inputs.exec]]
  interval = "3600s"
  # Shell/commands array Full command line to executable with parameters, or a glob pattern to 
  # run all matching files.
  commands = ["/usr/local/bin/speedtest-cli --json"]
  ## Timeout for each command to complete.
  timeout = "60s"
  # Data format to consume. NOTE json only reads numerical measurements, strings and booleans 
  # are ignored.
  data_format = "json"
  # measurement name suffix (for separating different commands)
  name_suffix = "_speedtest"

[[inputs.exec]]
  interval = "300s"
  commands = ["python /usr/app/evohome.py"]
  data_format = "json"
  name_suffix = "_evohome"
